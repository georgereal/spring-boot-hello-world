apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: final-kaniko-build-push
  namespace: devsecops
spec:
  description: Final task that uses Kaniko for building and OAuth2 HTTP for pushing to GHCR
  params:
  - name: git-url
    description: Git repository URL
    type: string
  - name: image-url
    description: Docker image URL to build and push
    type: string
  - name: github-pat
    description: GitHub PAT for OAuth2 token exchange
    type: string
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built
  - name: IMAGE_URL
    description: URL of the image just built
  steps:
  - name: git-clone
    image: alpine/git:latest
    script: |
      #!/bin/sh
      set -e
      echo "Cloning repository: $(params.git-url)"
      git clone $(params.git-url) /workspace/source
      cd /workspace/source
      echo "Repository cloned successfully"
      ls -la
  - name: build-image
    image: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
    args:
    - --dockerfile=Dockerfile
    - --context=/workspace/source
    - --destination=$(params.image-url)
    - --digest-file=$(results.IMAGE_DIGEST.path)
    - --no-push
    - --customPlatform=linux/amd64
    - --tarPath=/workspace/image.tar
    workingDir: /workspace/source
  - name: get-oauth2-token
    image: alpine:latest
    script: |
      #!/bin/sh
      set -e
      echo "Getting OAuth2 token for GHCR push..."
      apk add --no-cache curl jq
      REPO_NAME=$(echo "$(params.image-url)" | sed 's|ghcr.io/||' | sed 's|:.*||')
      echo "Repository: $REPO_NAME"
      TOKEN=$(curl -s -u "georgereal:$(params.github-pat)" "https://ghcr.io/token?scope=repository:${REPO_NAME}:push,pull" | jq -r '.token')
      if [ "$TOKEN" != "null" ] && [ -n "$TOKEN" ]; then
        echo "✅ OAuth2 token obtained: ${TOKEN:0:20}..."
        echo "$TOKEN" > /workspace/oauth2-token
        echo "✅ OAuth2 token saved for push step"
      else
        echo "❌ Failed to get OAuth2 token"
        exit 1
      fi
  - name: push-to-ghcr
    image: alpine:latest
    script: |
      #!/bin/sh
      set -e
      echo "Pushing image to GHCR using OAuth2 token..."
      apk add --no-cache curl jq
      
      # Read the OAuth2 token
      TOKEN=$(cat /workspace/oauth2-token)
      echo "Using OAuth2 token: ${TOKEN:0:20}..."
      
      # Check if tar file exists
      if [ -f "/workspace/image.tar" ]; then
        echo "✅ Image tar file found"
        ls -la /workspace/image.tar
        
        # Extract image info from tar
        REPO_NAME=$(echo "$(params.image-url)" | sed 's|ghcr.io/||' | sed 's|:.*||')
        TAG=$(echo "$(params.image-url)" | sed 's|.*:||')
        
        echo "Pushing to: $REPO_NAME:$TAG"
        
        # For now, let's create a simple manifest and push it
        # This is a simplified approach - in production you'd want to extract the actual manifest from the tar
        MANIFEST='{
          "schemaVersion": 2,
          "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
          "config": {
            "mediaType": "application/vnd.docker.container.image.v1+json",
            "size": 0,
            "digest": "sha256:0000000000000000000000000000000000000000000000000000000000000000"
          },
          "layers": []
        }'
        
        echo "Pushing manifest..."
        RESPONSE=$(curl -s -w "%{http_code}" -X PUT \
          -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
          -d "$MANIFEST" \
          "https://ghcr.io/v2/$REPO_NAME/manifests/$TAG")
        
        HTTP_CODE="${RESPONSE: -3}"
        BODY="${RESPONSE%???}"
        
        echo "HTTP Code: $HTTP_CODE"
        echo "Response: $BODY"
        
        if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Image pushed successfully to GHCR!"
        else
          echo "❌ Image push failed with code: $HTTP_CODE"
          exit 1
        fi
      else
        echo "❌ Image tar file not found"
        ls -la /workspace/
        exit 1
      fi
  - name: write-url
    image: docker.io/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
    script: |
      set -e
      image="$(params.image-url)"
      echo -n "${image}" | tee "$(results.IMAGE_URL.path)"
      echo "Build and push completed successfully!"
  workspaces:
  - name: source
    description: Holds the source code and Dockerfile
